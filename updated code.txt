make this code separate the method in .py and call method in views.py

Sure, let's refactor the code to separate the method into a separate utility file and call that method from `views.py`.

### Step 1: Create a Utility Function in a Separate File

Let's create a new file called `utils.py` in your app directory (e.g., `myapp/utils.py`) and move the core logic there.

#### `myapp/utils.py`
```python
import pandas as pd
import os

def process_uploaded_files(uploaded_files):
    responses = []

    for uploaded_file in uploaded_files:
        try:
            # Use pandas to read the uploaded Excel file
            df = pd.read_excel(uploaded_file)

            # Extract the header (first row)
            header = df.columns.tolist()

            # Create a new DataFrame with only the header
            new_df = pd.DataFrame(columns=header)

            # Specify the path to save the generated Excel file
            save_path = r'C:\Users\raja0\OneDrive\Desktop\uploaded Excel extract its header'

            # Ensure the directory exists
            os.makedirs(save_path, exist_ok=True)

            # Generate the file name dynamically or use a fixed name
            file_name = 'header_only.xlsx'

            # Save the DataFrame to Excel format
            full_path = os.path.join(save_path, file_name)
            new_df.to_excel(full_path, index=False)

            # Optionally, you can return a response with the saved file path
            responses.append({"message": "File saved successfully", "file_path": full_path})

        except Exception as e:
            responses.append({"error": str(e)})

    return responses
```

### Step 2: Update `views.py` to Call the Utility Function

Now, update your `views.py` to use the utility function you just created.

#### `myapp/views.py`
```python
from django.http import JsonResponse
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status   
from .utils import process_uploaded_files

@api_view(['POST'])
def update_database(request):
    try:
        # Ensure the file key matches the form field name ('file' instead of 'file.xlsx')
        uploaded_files = request.FILES.getlist('file.xlsx')

        if not uploaded_files:
            return Response({"error": "No file provided"}, status=status.HTTP_400_BAD_REQUEST)
        
        # Call the utility function to process the uploaded files
        responses = process_uploaded_files(uploaded_files)
        
        return JsonResponse({"responses": responses})
    
    except Exception as e:
        return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
```

### Summary of Changes

1. **Created `utils.py`**: Moved the core logic of processing uploaded files into a separate utility function.
2. **Updated `views.py`**: Modified the view to call the utility function and handle the response.

### Testing with Postman

1. **Endpoint URL**: `http://127.0.0.1:8000/api/update-database/`
2. **Request Method**: `POST`
3. **Headers**: 
    - `Content-Type: multipart/form-data`
4. **Body**:
    - Form-Data with key as `file.xlsx` and value as the file to upload.

By following these steps, you can keep your code organized and modular, making it easier to maintain and test.